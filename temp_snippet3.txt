            dot.classList.add('selected');
            dot.style.backgroundColor = '';
        } else {
            dot.classList.toggle('active', isCurrentBeat);
            dot.classList.toggle('selected', isSelected);
            const l = selectedBeatsLeft.has(beatNumber);
            const r = selectedBeatsRight.has(beatNumber);
            const colors = getNextColorsForStage(currentStage);
            let color = '';
            if (l && r) color = colors.both;
            else if (l) color = colors.left;
            else if (r) color = colors.right;
            else color = '';
            dot.style.backgroundColor = color;
        }
    });
}

function checkRhythmPattern() {
    // ステージ6の特殊判定
    if (currentStage === 6) {
        // 前半と後半のドット数をカウント
        let firstHalfCount = 0;
        let secondHalfCount = 0;
        
        // 前半（1-4拍）のカウント
        for (let i = 1; i <= 4; i++) {
            if (selectedBeats.has(i)) {
                firstHalfCount++;
            }
        }
        
        // 後半（5-8拍）のカウント
        for (let i = 5; i <= 8; i++) {
            if (selectedBeats.has(i)) {
                secondHalfCount++;
            }
        }

        // 正解判定: 前半が2回、後半が3回
        if (firstHalfCount === 2 && secondHalfCount === 3) {
            clearedStages.add(currentStage);
            currentStage++;
            updateStageContent();
        }
        
        selectedBeats.clear();
        selectedBeatsLeft.clear();
        selectedBeatsRight.clear();
        return;
    }

    if (currentStage === 16) {
