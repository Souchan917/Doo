            const timeValue = document.createElement('div');
            timeValue.id = 'debugTimeValue';
            timeValue.textContent = '0:00';
            timeValue.style.color = 'white';
            timeValue.style.fontSize = '12px';
            timeValue.style.width = '48px';
            timeValue.style.textAlign = 'right';

            const slider = document.createElement('input');
            slider.type = 'range';
            slider.id = 'debugTimeSlider';
            slider.min = '0';
            slider.max = String(TOTAL_DURATION);
            slider.step = '0.05';
            slider.value = '0';
            slider.style.flex = '1';

            row.appendChild(label);
            row.appendChild(slider);
            row.appendChild(timeValue);
            toolsRoot.appendChild(row);

            const startScrub = () => { self._scrubbing = true; };
            const endScrub = () => { self._scrubbing = false; };
            slider.addEventListener('mousedown', startScrub);
            slider.addEventListener('touchstart', startScrub, { passive: true });
            slider.addEventListener('mouseup', endScrub);
            slider.addEventListener('touchend', endScrub);

            const seekTo = (sec) => {
                currentTime = sec;
                audio.currentTime = sec;
                self.updateTimeLabel(sec);
                updateProgress();
                updateProblemElements();
                updateRhythmDots();
            };

            slider.addEventListener('input', () => {
                const sec = parseFloat(slider.value) || 0;
                const now = (window.performance && performance.now) ? performance.now() : Date.now();
                if (!self._lastSeekAt || now - self._lastSeekAt > 50) {
                    self._lastSeekAt = now;
                    seekTo(sec);
                } else {
                    // 軽量に表示だけ更新
                    self.updateTimeLabel(sec);
                }
            });
            slider.addEventListener('change', () => {
                const sec = parseFloat(slider.value) || 0;
                seekTo(sec);
            });

            self._timeSlider = slider;
            self._timeLabel = timeValue;
        })(this);

        // 判定オフセット（ms）調整UIをデバッグツールに追加
        (function setupJudgeOffsetUI(self){
            const toolsRoot = document.getElementById('debugTools');
